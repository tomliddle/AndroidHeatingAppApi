apply plugin: 'scala'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'application'
apply from: 'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'

// jetty runner class
//mainClassName = 'org.eclipse.jetty.runner.Runner'

configurations {
    provided // provided scope
    container // group for jetty container used to run webapp from ./gradlew jettyRun
}

// add provided scope to source compilation
sourceSets {
    main { 
        compileClasspath += configurations.provided 
        runtimeClasspath += configurations.provided
    }
    test { 
        compileClasspath += configurations.provided 
        runtimeClasspath += configurations.provided
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // scala! 
	compile group: 'org.scala-lang', name: 'scala-library', version: '2.10'

	compile 'org.eclipse.jetty:jetty-server:9.3.0.M1'
	compile 'org.eclipse.jetty:jetty-servlet:9.3.0.M1'
	compile 'org.eclipse.jetty:jetty-webapp:9.3.0.M1'

	//compile 'org.akhikhl.gretty:gretty-commons:0.0.25'



	// scalatra deps
    compile group: 'org.scalatra', name: 'scalatra_2.10', version: '2.3.0'
    compile group: 'org.scalatra', name: 'scalatra-scalate_2.10', version: '2.3.0'

	compile group: 'com.pi4j', name: 'pi4j-core', version: '0.0.5'


	//compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.8.7'


	// container used to run from gradle
   // container group: 'org.eclipse.jetty', name: 'jetty-runner', version: '9.3.0.M1'

    // servlet api
    provided group: 'org.eclipse.jetty.orbit', name: 'javax.servlet', version: '3.0.0.v201112011016'
}

// remove provided scope from war
/*war {
    classpath -= configurations.provided
}*/

// manually specify gradle version for gradlew
task wrapper(type: Wrapper) {
    distributionUrl = "http://services.gradle.org/distributions/gradle-2.0-bin.zip" 
}

gretty {
	contextPath = "/"
}
/*


// include war file
applicationDistribution.from(war) {
    into("webapp")
}

applicationDistribution.from('build/container') {
    into("lib")
}

// prepare container 
task prepareContainer(type: Copy) {
    from configurations.container
    into 'build/container'    
}

startScripts {
    classpath = configurations.container

    doLast {
        unixScript.text = unixScript.text.replace("$mainClassName", "$mainClassName webapp/$war.archiveName")  
    }
}
*/

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
        scopes.PROVIDED.plus += [ configurations.provided ]
    }
}

/*
distZip {
    // remove all jars added by default by application plugin
    def toExclude = [jar.archiveName]
    configurations.runtime.each { dependency ->
        toExclude.add(dependency.getName())
    }
    excludes = toExclude
}

distZip.dependsOn prepareContainer

*/
