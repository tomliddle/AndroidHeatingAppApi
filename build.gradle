apply plugin: 'scala'
apply plugin: 'war'
apply plugin: 'java'
apply plugin: 'application'

// jetty runner class
mainClassName = 'com.tomliddle.JettyLauncher'

version = '1.0'
sourceCompatibility = 1.7
targetCompatibility = 1.7

configurations {
    provided // provided scope
    container // group for jetty container used to run webapp from ./gradlew jettyRun
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

// add provided scope to source compilation
sourceSets {
    main {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
    test {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
}

repositories {
    mavenCentral()
}

dependencies {

    def scalaVersion = '2.10.3'
    compile group: 'org.scala-lang', name: 'scala-compiler', version: scalaVersion
    compile group: 'org.scala-lang', name: 'scala-library', version: scalaVersion
    compile group: 'org.scala-lang', name: 'scala-reflect', version: scalaVersion

    compile 'com.typesafe.scala-logging:scala-logging-slf4j_2.10:2.1.2'

    def akkaVersion = '2.3.7'
    compile 'com.typesafe.akka:akka-slf4j_2.10:' + akkaVersion
    compile 'com.typesafe.akka:akka-actor_2.10:' + akkaVersion

    compile 'org.eclipse.jetty:jetty-webapp:9.2.6.v20141205'

    // scalatra deps
    compile group: 'org.scalatra', name: 'scalatra_2.10', version: '2.3.0'
    compile 'org.json4s:json4s-jackson_2.10:3.2.11'

    testCompile 'org.scalatra:scalatra-scalatest_2.10:2.3.1'
    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile group: 'com.typesafe.akka', name: 'akka-testkit_2.10', version: akkaVersion
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}


task copyResourcesToLib(type: Copy) {
    into "$buildDir/libs/src/main/webapp"
    from {
        'src/main/webapp'
    }
}

task copyToLib(type: Copy) {
    into "$buildDir/libs"
    from {
        configurations.runtime
    }
    from {
        'bin'
    }
    dependsOn(copyResourcesToLib)
}

task localDevelopment(type: Copy) {
    into "lib"
    from configurations.runtime
    from configurations.testCompile


}

task dist(type: Jar) {
    manifest {
        manifest {
            attributes(
                    "Main-Class": mainClassName,
                    "Class-Path": "."
            )
        }
    }

    // We want all the libs
    from sourceSets.main.output
    archiveName='AndroidHeatingAppApi.jar'
    dependsOn(copyToLib)
}

task release(dependsOn: dist, type: Exec) {
    executable "bash"
    args "-c", "./release.sh"

    dependsOn(dist)
}